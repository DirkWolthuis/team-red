[{"C:\\Users\\pzonneve\\team-red\\src\\index.js":"1","C:\\Users\\pzonneve\\team-red\\src\\App.js":"2","C:\\Users\\pzonneve\\team-red\\src\\reportWebVitals.js":"3","C:\\Users\\pzonneve\\team-red\\src\\utils\\DataHandler.js":"4","C:\\Users\\pzonneve\\team-red\\src\\TagSwipe.jsx":"5","C:\\Users\\pzonneve\\team-red\\src\\EventCardComponent.jsx":"6"},{"size":494,"mtime":1608208984060,"results":"7","hashOfConfig":"8"},{"size":6917,"mtime":1608211660398,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1608198948503,"results":"11","hashOfConfig":"8"},{"size":536,"mtime":1608208489842,"results":"12","hashOfConfig":"8"},{"size":5053,"mtime":1608210905651,"results":"13","hashOfConfig":"10"},{"size":2042,"mtime":1608211440960,"results":"14","hashOfConfig":"10"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zui8ck",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fq8o8c",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\pzonneve\\team-red\\src\\index.js",[],"C:\\Users\\pzonneve\\team-red\\src\\App.js",[],"C:\\Users\\pzonneve\\team-red\\src\\reportWebVitals.js",[],"C:\\Users\\pzonneve\\team-red\\src\\utils\\DataHandler.js",[],"C:\\Users\\pzonneve\\team-red\\src\\TagSwipe.jsx",["29"],"import React, { useState, useMemo } from \"react\";\r\nimport TinderCard from \"react-tinder-card\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  .app > div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .row {\r\n    flex-direction: row !important;\r\n  }\r\n\r\n  .row > * {\r\n    margin: 5px;\r\n  }\r\n\r\n  .swipe {\r\n    position: absolute;\r\n  }\r\n\r\n  .cardContainer {\r\n    max-width: 260px;\r\n    height: 300px;\r\n  }\r\n\r\n  .card {\r\n    position: relative;\r\n    background-color: #fff;\r\n    width: 80vw;\r\n    max-width: 260px;\r\n    height: 300px;\r\n    box-shadow: 0px 0px 60px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 20px;\r\n    background-size: cover;\r\n    background-position: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .cardContent {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  .swipe:last-of-type {\r\n  }\r\n\r\n  .infoText {\r\n    width: 100%;\r\n    height: 28px;\r\n    justify-content: center;\r\n    display: flex;\r\n    color: #fff;\r\n    animation-name: popup;\r\n    animation-duration: 800ms;\r\n  }\r\n\r\n  .buttons {\r\n    margin: 20px;\r\n    display: flex;\r\n  }\r\n\r\n  .buttons button {\r\n    flex-shrink: 0;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    color: #fff;\r\n    font-size: 18px;\r\n    background-color: #9198e5;\r\n    transition: 200ms;\r\n    margin: 0 10px;\r\n    font-weight: bolder;\r\n    width: 160px;\r\n    box-shadow: 0px 0px 30px 0px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  .buttons button:hover {\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  @keyframes popup {\r\n    0% {\r\n      transform: scale(1, 1);\r\n    }\r\n    10% {\r\n      transform: scale(1.1, 1.1);\r\n    }\r\n    30% {\r\n      transform: scale(0.9, 0.9);\r\n    }\r\n    50% {\r\n      transform: scale(1, 1);\r\n    }\r\n    57% {\r\n      transform: scale(1, 1);\r\n    }\r\n    64% {\r\n      transform: scale(1, 1);\r\n    }\r\n    100% {\r\n      transform: scale(1, 1);\r\n    }\r\n  }\r\n`;\r\n\r\nconst db = [\r\n  {\r\n    name: \"Raspberry Pi\",\r\n  },\r\n  {\r\n    name: \"Docker\",\r\n  },\r\n  {\r\n    name: \"Svelte\",\r\n  },\r\n  {\r\n    name: \"Gitlab\",\r\n  },\r\n  {\r\n    name: \"Kubernetes\",\r\n  },\r\n];\r\n\r\nconst alreadyRemoved = [];\r\nlet charactersState = db; // This fixes issues with updating characters state forcing it to use the current state and not the state that was active when the card was created.\r\n\r\nconst TagSwipe = () => {\r\n  const [characters, setCharacters] = useState(db);\r\n  const [likes, setLikes] = useState([]);\r\n  const [dislikes, setDislikes] = useState([]);\r\n\r\n  const [lastDirection, setLastDirection] = useState();\r\n  const childRefs = useMemo(\r\n    () =>\r\n      Array(db.length)\r\n        .fill(0)\r\n        .map((i) => React.createRef()),\r\n    []\r\n  );\r\n\r\n  const swiped = (direction, nameToDelete) => {\r\n    if (direction === \"right\") {\r\n      setLikes([...likes, nameToDelete]);\r\n    }\r\n    if (direction === \"left\") {\r\n      setDislikes([...dislikes, nameToDelete]);\r\n    }\r\n\r\n    setLastDirection(direction);\r\n    alreadyRemoved.push(nameToDelete);\r\n  };\r\n\r\n  const outOfFrame = (name) => {\r\n    console.log(name + \" left the screen!\");\r\n    charactersState = charactersState.filter(\r\n      (character) => character.name !== name\r\n    );\r\n    setCharacters(charactersState);\r\n  };\r\n\r\n  const swipe = (dir) => {\r\n    const cardsLeft = characters.filter(\r\n      (person) => !alreadyRemoved.includes(person.name)\r\n    );\r\n    if (cardsLeft.length) {\r\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name; // Find the card object to be removed\r\n      const index = db.map((person) => person.name).indexOf(toBeRemoved); // Find the index of which to make the reference to\r\n      alreadyRemoved.push(toBeRemoved); // Make sure the next card gets removed next time if this card do not have time to exit the screen\r\n      childRefs[index].current.swipe(dir); // Swipe the card!\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <h1>React Tinder Card</h1>\r\n        <div className=\"cardContainer\">\r\n          {characters.map((character, index) => (\r\n            <TinderCard\r\n              ref={childRefs[index]}\r\n              className=\"swipe\"\r\n              key={character.name}\r\n              onSwipe={(dir) => swiped(dir, character.name)}\r\n              onCardLeftScreen={() => outOfFrame(character.name)}\r\n            >\r\n              <div className=\"card\">\r\n                <h3>{character.name}</h3>\r\n              </div>\r\n            </TinderCard>\r\n          ))}\r\n        </div>\r\n        {lastDirection ? (\r\n          <h2 className=\"infoText\">\r\n            {lastDirection === \"right\"\r\n              ? `you liked ${likes[likes.length - 1]}`\r\n              : `you liked ${dislikes[dislikes.length - 1]}`}\r\n          </h2>\r\n        ) : (\r\n          <h2 className=\"infoText\" />\r\n        )}\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <button onClick={() => swipe(\"left\")}>Swipe left!</button>\r\n        <button onClick={() => swipe(\"right\")}>Swipe right!</button>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TagSwipe;\r\n","C:\\Users\\pzonneve\\team-red\\src\\EventCardComponent.jsx",["30","31","32"],"import React, { useState, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nvar data = require('./data/data.json');\r\n\r\nconst Container = styled.div`\r\n  .eventcard {\r\n    position: relative;\r\n    background-color: #fff;\r\n    width: 80vw;\r\n    max-width: 260px;\r\n    box-shadow: 0px 0px 60px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 20px;\r\n    background-size: cover;\r\n    background-position: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding: 20px;\r\n\r\n    h3, p {\r\n      margin: 0px;\r\n    }\r\n\r\n    &__title {\r\n      color: black;\r\n      margin-bottom: 10px;\r\n    }\r\n\r\n    &__presentor {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 16px;\r\n\r\n      img {\r\n        height: 50px;\r\n        margin-left: 16px;\r\n      }\r\n    }\r\n\r\n    &__tags {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      justify-content: center;\r\n      color: black;\r\n      font-size: 12px;\r\n      \r\n      p {\r\n        margin: 2px;\r\n      }\r\n    }\r\n  }\r\n `;\r\n\r\n const randomNumber = () => {\r\n  return Math.floor(Math.random() * 20);\r\n};\r\n\r\nconst getRandomImage = () => {\r\n  const possibleImages = [\r\n    `https://randomuser.me/api/portraits/men/${randomNumber()}.jpg`,\r\n    `https://randomuser.me/api/portraits/women/${randomNumber()}.jpg`\r\n  ];\r\n  return possibleImages[Math.round(Math.random())];\r\n}\r\n\r\nconst EventCardComponent = ({ event }) => {\r\n  return (\r\n    <Container>\r\n      <div className=\"eventcard\">\r\n        <h3 className=\"eventcard__title\">{event.title}</h3>\r\n        <div className=\"eventcard__date\">\r\n          <p>{event.date}</p>\r\n        </div>\r\n        <div className=\"eventcard__presentor\">\r\n          <p>{event.presentor}</p>\r\n          <img src={getRandomImage()} alt=\"\"/>\r\n        </div>\r\n        <div className=\"eventcard__tags\">\r\n          {event.tags.map((item, index) => (\r\n            <p key={item}>{item}</p>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EventCardComponent;\r\n",{"ruleId":"33","severity":1,"message":"34","line":205,"column":11,"nodeType":"35","endLine":205,"endColumn":38},{"ruleId":"36","severity":1,"message":"37","line":1,"column":17,"nodeType":"38","messageId":"39","endLine":1,"endColumn":25},{"ruleId":"36","severity":1,"message":"40","line":1,"column":27,"nodeType":"38","messageId":"39","endLine":1,"endColumn":34},{"ruleId":"36","severity":1,"message":"41","line":3,"column":5,"nodeType":"38","messageId":"39","endLine":3,"endColumn":9},"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","'data' is assigned a value but never used."]