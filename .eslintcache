[{"C:\\Users\\dwolthui\\websites\\team-red\\src\\utils\\DataHandler.js":"1","C:\\Users\\dwolthui\\websites\\team-red\\src\\TagSwipe.jsx":"2","C:\\Users\\dwolthui\\websites\\team-red\\src\\App.js":"3","C:\\Users\\dwolthui\\websites\\team-red\\src\\Lists.jsx":"4"},{"size":536,"mtime":1608208820430,"results":"5","hashOfConfig":"6"},{"size":4711,"mtime":1608211062829,"results":"7","hashOfConfig":"6"},{"size":1809,"mtime":1608211083807,"results":"8","hashOfConfig":"6"},{"size":219,"mtime":1608210969078,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7f4oow",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\dwolthui\\websites\\team-red\\src\\utils\\DataHandler.js",[],"C:\\Users\\dwolthui\\websites\\team-red\\src\\TagSwipe.jsx",["19"],"import React, { useState, useMemo } from \"react\";\r\nimport TinderCard from \"react-tinder-card\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { getTags } from \"./utils/DataHandler\";\r\n\r\nconst Container = styled.div`\r\n  width: 50%;\r\n\r\n  .swipe {\r\n    position: absolute;\r\n  }\r\n\r\n  .cardContainer {\r\n    height: 300px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  .card {\r\n    position: relative;\r\n    background-color: #fff;\r\n    width: 80vw;\r\n    max-width: 260px;\r\n    height: 300px;\r\n    border-radius: 20px;\r\n    background-size: cover;\r\n    background-position: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .swipe:nth-last-child(2) > .card {\r\n    box-shadow: 0px 0px 60px 0px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  .swipe:last-child > .card {\r\n    box-shadow: 0px 0px 60px 0px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  .cardContent {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  .swipe:last-of-type {\r\n  }\r\n\r\n  .infoText {\r\n    width: 100%;\r\n    height: 28px;\r\n    justify-content: center;\r\n    display: flex;\r\n    color: #fff;\r\n    animation-name: popup;\r\n    animation-duration: 800ms;\r\n  }\r\n\r\n  .buttons {\r\n    margin: 20px;\r\n    display: flex;\r\n  }\r\n\r\n  .buttons button {\r\n    flex-shrink: 0;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    color: #fff;\r\n    font-size: 18px;\r\n    background-color: #9198e5;\r\n    transition: 200ms;\r\n    margin: 0 10px;\r\n    font-weight: bolder;\r\n    width: 160px;\r\n    box-shadow: 0px 0px 30px 0px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  .buttons button:hover {\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  h1 {\r\n    color: white;\r\n  }\r\n\r\n  h2 {\r\n    width: 260px;\r\n  }\r\n\r\n  @keyframes popup {\r\n    0% {\r\n      transform: scale(1, 1);\r\n    }\r\n    10% {\r\n      transform: scale(1.1, 1.1);\r\n    }\r\n    30% {\r\n      transform: scale(0.9, 0.9);\r\n    }\r\n    50% {\r\n      transform: scale(1, 1);\r\n    }\r\n    57% {\r\n      transform: scale(1, 1);\r\n    }\r\n    64% {\r\n      transform: scale(1, 1);\r\n    }\r\n    100% {\r\n      transform: scale(1, 1);\r\n    }\r\n  }\r\n`;\r\n\r\nconst db = getTags();\r\n\r\nconst alreadyRemoved = [];\r\nlet tagsState = db; // This fixes issues with updating tags state forcing it to use the current state and not the state that was active when the card was created.\r\n\r\nconst TagSwipe = ({ likes, dislikes, setLikes, setDislikes }) => {\r\n  const [tags, setTags] = useState(db);\r\n\r\n  const [lastDirection, setLastDirection] = useState();\r\n  const childRefs = useMemo(\r\n    () =>\r\n      Array(db.length)\r\n        .fill(0)\r\n        .map((i) => React.createRef()),\r\n    []\r\n  );\r\n\r\n  const swiped = (direction, nameToDelete) => {\r\n    if (direction === \"right\") {\r\n      setLikes([...likes, nameToDelete]);\r\n    }\r\n    if (direction === \"left\") {\r\n      setDislikes([...dislikes, nameToDelete]);\r\n    }\r\n\r\n    setLastDirection(direction);\r\n    alreadyRemoved.push(nameToDelete);\r\n  };\r\n\r\n  const outOfFrame = (tag) => {\r\n    tagsState = tagsState.filter((tagMap) => tagMap !== tag);\r\n    setTags(tagsState);\r\n  };\r\n\r\n  const swipe = (dir) => {\r\n    const cardsLeft = tags.filter(\r\n      (person) => !alreadyRemoved.includes(person.name)\r\n    );\r\n    if (cardsLeft.length) {\r\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name; // Find the card object to be removed\r\n      const index = db.indexOf(toBeRemoved); // Find the index of which to make the reference to\r\n      alreadyRemoved.push(toBeRemoved); // Make sure the next card gets removed next time if this card do not have time to exit the screen\r\n      childRefs[index].current.swipe(dir); // Swipe the card!\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <h1>React Tinder Card</h1>\r\n        <div className=\"cardContainer\">\r\n          {tags.map((tag, index) => (\r\n            <TinderCard\r\n              ref={childRefs[index]}\r\n              className=\"swipe\"\r\n              key={tag}\r\n              onSwipe={(dir) => swiped(dir, tag)}\r\n              onCardLeftScreen={() => outOfFrame(tag)}\r\n            >\r\n              <div className=\"card\">\r\n                <h3>{tag}</h3>\r\n              </div>\r\n            </TinderCard>\r\n          ))}\r\n        </div>\r\n        {lastDirection ? (\r\n          <h2 className=\"infoText\">\r\n            {lastDirection === \"right\"\r\n              ? `you liked '${likes[likes.length - 1]}'`\r\n              : `you disliked '${dislikes[dislikes.length - 1]}'`}\r\n          </h2>\r\n        ) : (\r\n          <h2 className=\"infoText\" />\r\n        )}\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <button onClick={() => swipe(\"left\")}>Swipe left!</button>\r\n        <button onClick={() => swipe(\"right\")}>Swipe right!</button>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TagSwipe;\r\n","C:\\Users\\dwolthui\\websites\\team-red\\src\\App.js",[],"C:\\Users\\dwolthui\\websites\\team-red\\src\\Lists.jsx",[],{"ruleId":"20","severity":1,"message":"21","line":189,"column":11,"nodeType":"22","endLine":189,"endColumn":38},"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement"]